package com.example.demo.dao.repositries;

import com.example.demo.dao.entities.Department;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface DepartmentRepository extends JpaRepository<Department, Long> {
    List<Department> findByIsActiveTrueAndIsDeletedFalse();
}

package com.example.demo.dao.repositries;

import com.example.demo.dao.entities.Employee;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Long> {
    List<Employee> findByIsActiveTrueAndIsDeletedFalse();
    List<Employee> findByDepartmentIdAndIsActiveTrueAndIsDeletedFalse(Long departmentId);
}

package com.example.demo.mapper;

import com.example.demo.dao.entities.Department;
import com.example.demo.dto.DepartmentDTO;
import org.mapstruct.Mapper;

@Mapper(componentModel = "spring")
public interface DepartmentMapper {
    Department mapDtoToEntity(DepartmentDTO departmentDTO);
    DepartmentDTO mapEntityToDto(Department department);
}

package com.example.demo.mapper;

import com.example.demo.dao.entities.Employee;
import com.example.demo.dto.EmployeeDTO;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.springframework.data.domain.Page;

import java.util.List;

@Mapper(componentModel = "spring")
public interface EmployeeMapper {
    Employee mapEmployeeDtoToEmployeeEntity(EmployeeDTO employeeDTO);

    EmployeeDTO mapEmployeeEntityToEmployeeDto(Employee employee);

    List<EmployeeDTO> mapEmployeeEntityListToEmployeeDtoList(List<Employee> employeeList);

    default Page<EmployeeDTO> mapEmployeeEntityPageToEmployeeDtoPage(Page<Employee> employeePage) {
        return employeePage.map(this::mapEmployeeEntityToEmployeeDto);
    }
}

package com.example.demo.service;

import com.example.demo.dto.DepartmentDTO;
import com.example.demo.dto.response.DepartmentApiResponse;
import org.springframework.data.domain.Pageable;

public interface DepartmentService {
    DepartmentApiResponse getDepartmentById(Long id);
    DepartmentApiResponse getAllDepartments(Pageable pageable);
    DepartmentApiResponse createDepartment(DepartmentDTO dto);
    DepartmentApiResponse updateDepartment(Long id, DepartmentDTO dto);
    DepartmentApiResponse deleteDepartment(Long id);
}

package com.example.demo.service;

import com.example.demo.dao.entities.Department;
import com.example.demo.dao.repositries.DepartmentRepository;
import com.example.demo.dto.DepartmentDTO;
import com.example.demo.dto.response.DepartmentApiResponse;
import com.example.demo.mapper.DepartmentMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Slf4j
@Service
@RequiredArgsConstructor
public class DepartmentServiceImpl implements DepartmentService {

    private final DepartmentRepository departmentRepository;
    private final DepartmentMapper departmentMapper;

    @Override
    public DepartmentApiResponse getDepartmentById(Long id) {
        log.info("Fetching Department with ID: {}", id);
        Optional<Department> departmentOptional = departmentRepository.findById(id);
        if (departmentOptional.isPresent()) {
            log.info("Department found with ID: {}", id);
            return new DepartmentApiResponse(departmentMapper.mapEntityToDto(departmentOptional.get()), HttpStatus.OK, "Department found", false);
        } else {
            log.warn("Department not found with ID: {}", id);
            return new DepartmentApiResponse(null, HttpStatus.NOT_FOUND, "Department not found", true);
        }
    }

    @Override
    public DepartmentApiResponse getAllDepartments(Pageable pageable) {
        log.info("Fetching all active departments with pagination");
        Page<Department> departmentPage = departmentRepository.findAll(pageable);
        List<DepartmentDTO> dtoList = departmentMapper.mapEntityListToDtoList(departmentPage.getContent());
        log.info("{} Departments found", dtoList.size());
        return new DepartmentApiResponse(dtoList, departmentPage, HttpStatus.OK, "Departments fetched successfully", false);
    }

    @Override
    @Transactional
    public DepartmentApiResponse createDepartment(DepartmentDTO dto) {
        log.info("Creating new Department with name: {}", dto.getName());
        Department department = departmentMapper.mapDtoToEntity(dto);
        department.setIsActive(true);
        Department savedDepartment = departmentRepository.save(department);
        log.info("Department created successfully with ID: {}", savedDepartment.getId());
        return new DepartmentApiResponse(departmentMapper.mapEntityToDto(savedDepartment), HttpStatus.CREATED, "Department created successfully", false);
    }

    @Override
    @Transactional
    public DepartmentApiResponse updateDepartment(Long id, DepartmentDTO dto) {
        log.info("Updating Department with ID: {}", id);
        Optional<Department> departmentOptional = departmentRepository.findById(id);
        if (departmentOptional.isPresent()) {
            Department departmentToUpdate = departmentOptional.get();
            departmentToUpdate.setName(dto.getName());
            departmentRepository.save(departmentToUpdate);
            log.info("Department updated successfully with ID: {}", id);
            return new DepartmentApiResponse(departmentMapper.mapEntityToDto(departmentToUpdate), HttpStatus.OK, "Department updated successfully", false);
        } else {
            log.warn("Department not found with ID: {}", id);
            return new DepartmentApiResponse(null, HttpStatus.NOT_FOUND, "Department not found", true);
        }
    }

    @Override
    @Transactional
    public DepartmentApiResponse deleteDepartment(Long id) {
        log.info("Soft-deleting Department with ID: {}", id);
        Optional<Department> departmentOptional = departmentRepository.findById(id);
        if (departmentOptional.isPresent()) {
            Department department = departmentOptional.get();
            department.setIsActive(false);
            departmentRepository.save(department);
            log.info("Department soft-deleted with ID: {}", id);
            return new DepartmentApiResponse(departmentMapper.mapEntityToDto(department), HttpStatus.OK, "Department deleted successfully", false);
        } else {
            log.warn("Department not found with ID: {}", id);
            return new DepartmentApiResponse(null, HttpStatus.NOT_FOUND, "Department not found", true);
        }
    }
}
